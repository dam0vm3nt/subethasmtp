#labels Featured
  = SubEthaSMTP Mail Server =

	
	

		http://en.wikipedia.org/wiki/Sub-EthaSMTP is
		an easy to understand Java library which provides a receptive 
		SMTP server component. By plugging this component into your 
		Java application, you can easily receive SMTP mail using a simple 
		but powerful abstract Java interface.
	

	
	

		This component can be used in almost any kind of email 
		processing application.  Hypothetical (and not-so hypothetical)
		uses include:
	

	
	 
		 
    * A mailing list manager (ie, http://subetha.tigris.org/)
		 
    * A mail server that delivers mail to user inboxes
		 
    * A mail archiver like http://www.mail-archive.com/
		 
    * An email test harness (Implemented in this project. It's called wiser.html.)
	
	
	

		SubEthaSMTP's simple, low-level API is suitable for writing almost
		any kind of mail-receiving application.
	

	
	
  == A Little History ==

	
	

		SubEthaSMTP was split out of the
		http://subetha.tigris.org/ mailing
		list manager because it is a useful standalone component.  When
		we wrote SubEtha, the last thing we wanted to do was write our
		own SMTP server.  In our search for a modular Java SMTP component,
		we examined:
	

	
	 
		 
    * http://james.apache.org/
		 
    *  http://labs.jboss.com/portal/jbossmail/index.html - Now http://www.buni.org/mediawiki/index.php/Meldware_Mail
		 
    * http://quintanasoft.com/dumbster/
		 
    * http://www.jsmtpd.org/site/
		 
    * http://www.ericdaugherty.com/java/mailserver/
		 
    * http://jmailsrv.sourceforge.net/
		 
    * http://www.icegreen.com/greenmail/
	
	
	

		Since you're reading this page you probably already know what we found:
		Seven different SMTP implementations without the slightest thought
		given to reusability. Even Jstmpd, which purports to be a "A Modular
		Java SMTP Daemon", isn't.  Even though  JBoss Mail 
		Meldware Mail is in active development, the team was unintersted in 
		componentization of the SMTP processing portion of their server. 
		GreenMail, which is based on the JAMES code base is best summarized with this 
		http://eokyere.blogspot.com/2006/10/get-wiser-with-subethasmtp.html.
	


	

		During the development of SubEtha's testing harness, we tried out
		the http://quintanasoft.com/dumbster/ software 
		and found that not only was the API difficult to use, it did it not work 
		properly, the developer has not done any development on it in about a 
		year and it does not work reliably on Mac OS X. With two simple classes
		we re-implemented it as an included project called wiser.html.
	

	
	

		We hate reinventing wheels.  This should be the LAST FREAKING JAVA
		SMTP IMPLEMENTATION.
	


	
  == Project Authors ==

	
	

		Ian McFarland contributed the first codebase to SubEtha Mail. Then, Jon Stevens
		and Jeff Schnitzer re-wrote most of Ian's code into what we have today. Edouard De Oliveira
		and Scott Hernandez have also made significant contributions.
	

	
	
  == How To Get It ==

	
	

		Head on down to the http://subethasmtp.tigris.org/servlets/ProjectDocumentList or get the source code from 
		our http://subethasmtp.tigris.org/source/browse/subethasmtp/.
	

	
	
  == How To Use It ==

	
	

		SubEthaSMTP depends only on the http://www.slf4j.org/ logging library.
		You will need  slf4j-api-X.X.X.jar and one of the SLF4J binding jars such
		as  slf4j-simple-X.X.X.jar, both of which are included in our distribution.
		Other binding jars (Log4J, java.util.logging, LogKit, etc) are available in the SLF4J distribution.
	

	
	

		Note that wiser.html has additional dependencies.
	

	
	

		SubEthaSMTP implements a powerful, low-level API that lets you handle incoming mail
		and (optionally) authenticate clients.  It also provides several helper classes that
		make life easier, if perhaps less flexible. 
	
	

	
  == The Basic API ==



{{{
SMTPServer smtpServer = new SMTPServer(myFactory);
smtpServer.start();
}}}

	

{{{
public interface MessageHandlerFactory
{
	/**
	 * Called for the exchange of a single message during an SMTP conversation.
	 */
	public MessageHandler create(MessageContext ctx);
}

public interface MessageHandler
{
	/**
	 * Called first, after the MAIL FROM during a SMTP exchange.
	 */
	public void from(String from) throws RejectException;
	
	/**
	 * Called once for every RCPT TO during a SMTP exchange.
	 * This will occur after a from() call.
	 */
	public void recipient(String recipient) throws RejectException;
	
	/**
	 * Called when the DATA part of the SMTP exchange begins.
	 */
	public void data(InputStream data) throws RejectException, TooMuchDataException, IOException;
}
}}}


	

		For every message delivery, SubEthaSMTP will call your Factory to create
		a MessageHandler.  The from(), recipient(), and data() methods will be
		called during each stage of the SMTP transaction.
		If multiple messages are delivered within a single SMTP session (via the RSET
		command), multiple MessageHandlers will be created.
	


	
  == Higher-Level Help ==

	

		If you simply wish to receive one copy of each message/recipient combination,
		the SimpleMessageListener will help you.
	

	

{{{
SMTPServer smtpServer = new SMTPServer(new SimpleMessageListenerAdapter(myListener));
smtpServer.start();
}}}

	
	

		The SimpleMessageListener is easy to implement:
	

	

{{{
public interface SimpleMessageListener
{
	/**
	 * Called once for every RCPT TO during a SMTP exchange.  Each accepted recipient
	 * will result in a separate deliver() call later.
	 */
	public boolean accept(String from, String recipient);

	/**
	 * When message data arrives, this method will be called for every recipient
	 * this listener accepted.
	 */
	public void deliver(String from, String recipient, InputStream data)
			throws TooMuchDataException, IOException;
}
}}}

	
	

		Your listener simply accept()s any recipients it cares about, and
		the SMTP server will deliver() an input stream of the message data.
		Any recipients which are not accepted by a listener will be rejected.
	

	
	

		Beware, however, that delivering mail to multiple
		recipients requires that the entire message be buffered as it is read by the
		first consumer.  The buffer will start to memory, then switch to disk if the
		size exceeds a threshold.
	


	

		Look at the
		http://subethasmtp.tigris.org/source/browse/*checkout*/subethasmtp/trunk/smtp/src/org/subethamail/wiser/Wiser.java
		for wiser.html 
		to see a simple example of how to implement SimpleMessageListener.deliver() so that 
		it receives a message and converts it into a JavaMail MimeMessage object.
	

	
	
  == Authentication ==

	

		SubEtha SMTP supports the SMTP AUTH commands through a factory interface similar to
		the MessageHandlerFactory.  For convenience, a pluggable authenticator implementation
		that supports PLAIN and LOGIN is provided with the distribution.
	



{{{
SMTPServer smtpServer = new SMTPServer(myMessageHandlerFactory);
smtpServer.setAuthenticationHandlerFactory(new EasyAuthenticationHandlerFactory(myUsernamePasswordValidator));
smtpServer.start();
}}}


	

		If you do not explicitly set an AuthenticationHandlerFactory, SMTP AUTH will not
		be advertised or supported.  See the javadocs for AuthenticationHandlerFactory for
		more information.
	

	
	
  == Threading ==

	

		SubEthaSMTP is a multithreaded server.  You may change settings on a stopped server
		(ie the # of simultaneous connections allowed) but not after calling start().  Each
		SMTP connection will be serviced by a new thread.
	

	
	
  == Support ==

	

		If you have any bug reports, questions or comments about SubEtha SMTP, it's best that
		you bring these issues up on the 
		http://subethasmtp.tigris.org/project_lists.html and
		not email the authors directly.
	


	
  == Spec Compliance ==


	

		For now, we have just focused on implementing just the minimal 
		required aspects of http://rfc.net/rfc2821.html#s4.5.1.
		We also return SMTP status responses that mimic what Postfix returns.
	

	
	

		Thanks to a contribution from 
		mailto:mike REPLACEWITH@ wildpaner.com, 
		we now support the 
		http://rfc.net/rfc2487.html.
	


	

		Thanks to a contribution from 
		mailto:mrctrevisan REPLACEWITH@ yahoo.it, 
		we now support the 
		http://rfc.net/rfc2554.html.
	
